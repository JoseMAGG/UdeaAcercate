import type { GraphQLResolveInfo } from "graphql";
import { AggregateCommentSentimentArgs } from "./args/AggregateCommentSentimentArgs";
import { CreateManyCommentSentimentArgs } from "./args/CreateManyCommentSentimentArgs";
import { CreateOneCommentSentimentArgs } from "./args/CreateOneCommentSentimentArgs";
import { DeleteManyCommentSentimentArgs } from "./args/DeleteManyCommentSentimentArgs";
import { DeleteOneCommentSentimentArgs } from "./args/DeleteOneCommentSentimentArgs";
import { FindFirstCommentSentimentArgs } from "./args/FindFirstCommentSentimentArgs";
import { FindFirstCommentSentimentOrThrowArgs } from "./args/FindFirstCommentSentimentOrThrowArgs";
import { FindManyCommentSentimentArgs } from "./args/FindManyCommentSentimentArgs";
import { FindUniqueCommentSentimentArgs } from "./args/FindUniqueCommentSentimentArgs";
import { FindUniqueCommentSentimentOrThrowArgs } from "./args/FindUniqueCommentSentimentOrThrowArgs";
import { GroupByCommentSentimentArgs } from "./args/GroupByCommentSentimentArgs";
import { UpdateManyCommentSentimentArgs } from "./args/UpdateManyCommentSentimentArgs";
import { UpdateOneCommentSentimentArgs } from "./args/UpdateOneCommentSentimentArgs";
import { UpsertOneCommentSentimentArgs } from "./args/UpsertOneCommentSentimentArgs";
import { CommentSentiment } from "../../../models/CommentSentiment";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCommentSentiment } from "../../outputs/AggregateCommentSentiment";
import { CommentSentimentGroupBy } from "../../outputs/CommentSentimentGroupBy";
export declare class CommentSentimentCrudResolver {
    aggregateCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: AggregateCommentSentimentArgs): Promise<AggregateCommentSentiment>;
    createManyCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: CreateManyCommentSentimentArgs): Promise<AffectedRowsOutput>;
    createOneCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: CreateOneCommentSentimentArgs): Promise<CommentSentiment>;
    deleteManyCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCommentSentimentArgs): Promise<AffectedRowsOutput>;
    deleteOneCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: DeleteOneCommentSentimentArgs): Promise<CommentSentiment | null>;
    findFirstCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: FindFirstCommentSentimentArgs): Promise<CommentSentiment | null>;
    findFirstCommentSentimentOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstCommentSentimentOrThrowArgs): Promise<CommentSentiment | null>;
    commentSentiments(ctx: any, info: GraphQLResolveInfo, args: FindManyCommentSentimentArgs): Promise<CommentSentiment[]>;
    commentSentiment(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCommentSentimentArgs): Promise<CommentSentiment | null>;
    getCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCommentSentimentOrThrowArgs): Promise<CommentSentiment | null>;
    groupByCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: GroupByCommentSentimentArgs): Promise<CommentSentimentGroupBy[]>;
    updateManyCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCommentSentimentArgs): Promise<AffectedRowsOutput>;
    updateOneCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: UpdateOneCommentSentimentArgs): Promise<CommentSentiment | null>;
    upsertOneCommentSentiment(ctx: any, info: GraphQLResolveInfo, args: UpsertOneCommentSentimentArgs): Promise<CommentSentiment>;
}
