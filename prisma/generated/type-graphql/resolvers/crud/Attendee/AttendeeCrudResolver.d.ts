import type { GraphQLResolveInfo } from "graphql";
import { AggregateAttendeeArgs } from "./args/AggregateAttendeeArgs";
import { CreateManyAttendeeArgs } from "./args/CreateManyAttendeeArgs";
import { CreateOneAttendeeArgs } from "./args/CreateOneAttendeeArgs";
import { DeleteManyAttendeeArgs } from "./args/DeleteManyAttendeeArgs";
import { DeleteOneAttendeeArgs } from "./args/DeleteOneAttendeeArgs";
import { FindFirstAttendeeArgs } from "./args/FindFirstAttendeeArgs";
import { FindFirstAttendeeOrThrowArgs } from "./args/FindFirstAttendeeOrThrowArgs";
import { FindManyAttendeeArgs } from "./args/FindManyAttendeeArgs";
import { FindUniqueAttendeeArgs } from "./args/FindUniqueAttendeeArgs";
import { FindUniqueAttendeeOrThrowArgs } from "./args/FindUniqueAttendeeOrThrowArgs";
import { GroupByAttendeeArgs } from "./args/GroupByAttendeeArgs";
import { UpdateManyAttendeeArgs } from "./args/UpdateManyAttendeeArgs";
import { UpdateOneAttendeeArgs } from "./args/UpdateOneAttendeeArgs";
import { UpsertOneAttendeeArgs } from "./args/UpsertOneAttendeeArgs";
import { Attendee } from "../../../models/Attendee";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAttendee } from "../../outputs/AggregateAttendee";
import { AttendeeGroupBy } from "../../outputs/AttendeeGroupBy";
export declare class AttendeeCrudResolver {
    aggregateAttendee(ctx: any, info: GraphQLResolveInfo, args: AggregateAttendeeArgs): Promise<AggregateAttendee>;
    createManyAttendee(ctx: any, info: GraphQLResolveInfo, args: CreateManyAttendeeArgs): Promise<AffectedRowsOutput>;
    createOneAttendee(ctx: any, info: GraphQLResolveInfo, args: CreateOneAttendeeArgs): Promise<Attendee>;
    deleteManyAttendee(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAttendeeArgs): Promise<AffectedRowsOutput>;
    deleteOneAttendee(ctx: any, info: GraphQLResolveInfo, args: DeleteOneAttendeeArgs): Promise<Attendee | null>;
    findFirstAttendee(ctx: any, info: GraphQLResolveInfo, args: FindFirstAttendeeArgs): Promise<Attendee | null>;
    findFirstAttendeeOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstAttendeeOrThrowArgs): Promise<Attendee | null>;
    attendees(ctx: any, info: GraphQLResolveInfo, args: FindManyAttendeeArgs): Promise<Attendee[]>;
    attendee(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAttendeeArgs): Promise<Attendee | null>;
    getAttendee(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAttendeeOrThrowArgs): Promise<Attendee | null>;
    groupByAttendee(ctx: any, info: GraphQLResolveInfo, args: GroupByAttendeeArgs): Promise<AttendeeGroupBy[]>;
    updateManyAttendee(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAttendeeArgs): Promise<AffectedRowsOutput>;
    updateOneAttendee(ctx: any, info: GraphQLResolveInfo, args: UpdateOneAttendeeArgs): Promise<Attendee | null>;
    upsertOneAttendee(ctx: any, info: GraphQLResolveInfo, args: UpsertOneAttendeeArgs): Promise<Attendee>;
}
