import type { GraphQLResolveInfo } from "graphql";
import { AggregateReportArgs } from "./args/AggregateReportArgs";
import { CreateManyReportArgs } from "./args/CreateManyReportArgs";
import { CreateOneReportArgs } from "./args/CreateOneReportArgs";
import { DeleteManyReportArgs } from "./args/DeleteManyReportArgs";
import { DeleteOneReportArgs } from "./args/DeleteOneReportArgs";
import { FindFirstReportArgs } from "./args/FindFirstReportArgs";
import { FindFirstReportOrThrowArgs } from "./args/FindFirstReportOrThrowArgs";
import { FindManyReportArgs } from "./args/FindManyReportArgs";
import { FindUniqueReportArgs } from "./args/FindUniqueReportArgs";
import { FindUniqueReportOrThrowArgs } from "./args/FindUniqueReportOrThrowArgs";
import { GroupByReportArgs } from "./args/GroupByReportArgs";
import { UpdateManyReportArgs } from "./args/UpdateManyReportArgs";
import { UpdateOneReportArgs } from "./args/UpdateOneReportArgs";
import { UpsertOneReportArgs } from "./args/UpsertOneReportArgs";
import { Report } from "../../../models/Report";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateReport } from "../../outputs/AggregateReport";
import { ReportGroupBy } from "../../outputs/ReportGroupBy";
export declare class ReportCrudResolver {
    aggregateReport(ctx: any, info: GraphQLResolveInfo, args: AggregateReportArgs): Promise<AggregateReport>;
    createManyReport(ctx: any, info: GraphQLResolveInfo, args: CreateManyReportArgs): Promise<AffectedRowsOutput>;
    createOneReport(ctx: any, info: GraphQLResolveInfo, args: CreateOneReportArgs): Promise<Report>;
    deleteManyReport(ctx: any, info: GraphQLResolveInfo, args: DeleteManyReportArgs): Promise<AffectedRowsOutput>;
    deleteOneReport(ctx: any, info: GraphQLResolveInfo, args: DeleteOneReportArgs): Promise<Report | null>;
    findFirstReport(ctx: any, info: GraphQLResolveInfo, args: FindFirstReportArgs): Promise<Report | null>;
    findFirstReportOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstReportOrThrowArgs): Promise<Report | null>;
    reports(ctx: any, info: GraphQLResolveInfo, args: FindManyReportArgs): Promise<Report[]>;
    report(ctx: any, info: GraphQLResolveInfo, args: FindUniqueReportArgs): Promise<Report | null>;
    getReport(ctx: any, info: GraphQLResolveInfo, args: FindUniqueReportOrThrowArgs): Promise<Report | null>;
    groupByReport(ctx: any, info: GraphQLResolveInfo, args: GroupByReportArgs): Promise<ReportGroupBy[]>;
    updateManyReport(ctx: any, info: GraphQLResolveInfo, args: UpdateManyReportArgs): Promise<AffectedRowsOutput>;
    updateOneReport(ctx: any, info: GraphQLResolveInfo, args: UpdateOneReportArgs): Promise<Report | null>;
    upsertOneReport(ctx: any, info: GraphQLResolveInfo, args: UpsertOneReportArgs): Promise<Report>;
}
